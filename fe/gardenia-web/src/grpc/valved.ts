/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.6
 * source: valved.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace valvedgrpc {
    export enum ValveStatus {
        Open = 0,
        Close = 1,
        Invalid = 2
    }
    export class OpenValveRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenValveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenValveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OpenValveRequest {
            return OpenValveRequest.deserialize(bytes);
        }
    }
    export class OpenValveReply extends pb_1.Message {
        constructor(data?: any[] | {
            Message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Message" in data && data.Message != undefined) {
                    this.Message = data.Message;
                }
            }
        }
        get Message() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                Message?: string;
            } = {};
            if (this.Message != null) {
                data.Message = this.Message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Message === "string" && this.Message.length)
                writer.writeString(1, this.Message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenValveReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenValveReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OpenValveReply {
            return OpenValveReply.deserialize(bytes);
        }
    }
    export class CloseValveRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseValveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloseValveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloseValveRequest {
            return CloseValveRequest.deserialize(bytes);
        }
    }
    export class CloseValveReply extends pb_1.Message {
        constructor(data?: any[] | {
            Message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Message" in data && data.Message != undefined) {
                    this.Message = data.Message;
                }
            }
        }
        get Message() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                Message?: string;
            } = {};
            if (this.Message != null) {
                data.Message = this.Message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Message === "string" && this.Message.length)
                writer.writeString(1, this.Message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseValveReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloseValveReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloseValveReply {
            return CloseValveReply.deserialize(bytes);
        }
    }
    export class StatusValveRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusValveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusValveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusValveRequest {
            return StatusValveRequest.deserialize(bytes);
        }
    }
    export class StatusValveReply extends pb_1.Message {
        constructor(data?: any[] | {
            Status?: ValveStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Status" in data && data.Status != undefined) {
                    this.Status = data.Status;
                }
            }
        }
        get Status() {
            return pb_1.Message.getField(this, 1) as ValveStatus;
        }
        set Status(value: ValveStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                Status?: ValveStatus;
            } = {};
            if (this.Status != null) {
                data.Status = this.Status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Status !== undefined)
                writer.writeEnum(1, this.Status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusValveReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusValveReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusValveReply {
            return StatusValveReply.deserialize(bytes);
        }
    }
    export abstract class UnimplementedValvedSvcService {
        static definition = {
            Open: {
                path: "/valvedgrpc.ValvedSvc/Open",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OpenValveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OpenValveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OpenValveReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OpenValveReply.deserialize(new Uint8Array(bytes))
            },
            Close: {
                path: "/valvedgrpc.ValvedSvc/Close",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CloseValveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CloseValveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CloseValveReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CloseValveReply.deserialize(new Uint8Array(bytes))
            },
            Status: {
                path: "/valvedgrpc.ValvedSvc/Status",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StatusValveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StatusValveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusValveReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusValveReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Open(call: grpc_1.ServerUnaryCall<OpenValveRequest, OpenValveReply>, callback: grpc_1.requestCallback<OpenValveReply>): void;
        abstract Close(call: grpc_1.ServerUnaryCall<CloseValveRequest, CloseValveReply>, callback: grpc_1.requestCallback<CloseValveReply>): void;
        abstract Status(call: grpc_1.ServerUnaryCall<StatusValveRequest, StatusValveReply>, callback: grpc_1.requestCallback<StatusValveReply>): void;
    }
    export class ValvedSvcClient extends grpc_1.makeGenericClientConstructor(UnimplementedValvedSvcService.definition, "ValvedSvc", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        Open(message: OpenValveRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<OpenValveReply>): grpc_1.ClientUnaryCall;
        Open(message: OpenValveRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<OpenValveReply>): grpc_1.ClientUnaryCall;
        Open(message: OpenValveRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<OpenValveReply>): grpc_1.ClientUnaryCall;
        Open(message: OpenValveRequest, callback: grpc_1.requestCallback<OpenValveReply>): grpc_1.ClientUnaryCall;
        Open(message: OpenValveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OpenValveReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OpenValveReply>, callback?: grpc_1.requestCallback<OpenValveReply>): grpc_1.ClientUnaryCall {
            return super.Open(message, metadata, options, callback);
        }
        Close(message: CloseValveRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<CloseValveReply>): grpc_1.ClientUnaryCall;
        Close(message: CloseValveRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<CloseValveReply>): grpc_1.ClientUnaryCall;
        Close(message: CloseValveRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<CloseValveReply>): grpc_1.ClientUnaryCall;
        Close(message: CloseValveRequest, callback: grpc_1.requestCallback<CloseValveReply>): grpc_1.ClientUnaryCall;
        Close(message: CloseValveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CloseValveReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CloseValveReply>, callback?: grpc_1.requestCallback<CloseValveReply>): grpc_1.ClientUnaryCall {
            return super.Close(message, metadata, options, callback);
        }
        Status(message: StatusValveRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<StatusValveReply>): grpc_1.ClientUnaryCall;
        Status(message: StatusValveRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<StatusValveReply>): grpc_1.ClientUnaryCall;
        Status(message: StatusValveRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<StatusValveReply>): grpc_1.ClientUnaryCall;
        Status(message: StatusValveRequest, callback: grpc_1.requestCallback<StatusValveReply>): grpc_1.ClientUnaryCall;
        Status(message: StatusValveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusValveReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusValveReply>, callback?: grpc_1.requestCallback<StatusValveReply>): grpc_1.ClientUnaryCall {
            return super.Status(message, metadata, options, callback);
        }
    }
}
