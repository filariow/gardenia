// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: schedule.proto

package valvedprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleSvcClient is the client API for ScheduleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleSvcClient interface {
	AddSchedule(ctx context.Context, in *AddScheduleRequest, opts ...grpc.CallOption) (*AddScheduleReply, error)
	ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesReply, error)
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleReply, error)
	DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleReply, error)
}

type scheduleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleSvcClient(cc grpc.ClientConnInterface) ScheduleSvcClient {
	return &scheduleSvcClient{cc}
}

func (c *scheduleSvcClient) AddSchedule(ctx context.Context, in *AddScheduleRequest, opts ...grpc.CallOption) (*AddScheduleReply, error) {
	out := new(AddScheduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ScheduleSvc/AddSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleSvcClient) ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesReply, error) {
	out := new(ListSchedulesReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ScheduleSvc/ListSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleSvcClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleReply, error) {
	out := new(GetScheduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ScheduleSvc/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleSvcClient) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleReply, error) {
	out := new(DeleteScheduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ScheduleSvc/DeleteSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleSvcServer is the server API for ScheduleSvc service.
// All implementations must embed UnimplementedScheduleSvcServer
// for forward compatibility
type ScheduleSvcServer interface {
	AddSchedule(context.Context, *AddScheduleRequest) (*AddScheduleReply, error)
	ListSchedules(context.Context, *ListSchedulesRequest) (*ListSchedulesReply, error)
	GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleReply, error)
	DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleReply, error)
	mustEmbedUnimplementedScheduleSvcServer()
}

// UnimplementedScheduleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleSvcServer struct {
}

func (UnimplementedScheduleSvcServer) AddSchedule(context.Context, *AddScheduleRequest) (*AddScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchedule not implemented")
}
func (UnimplementedScheduleSvcServer) ListSchedules(context.Context, *ListSchedulesRequest) (*ListSchedulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchedules not implemented")
}
func (UnimplementedScheduleSvcServer) GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedScheduleSvcServer) DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (UnimplementedScheduleSvcServer) mustEmbedUnimplementedScheduleSvcServer() {}

// UnsafeScheduleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleSvcServer will
// result in compilation errors.
type UnsafeScheduleSvcServer interface {
	mustEmbedUnimplementedScheduleSvcServer()
}

func RegisterScheduleSvcServer(s grpc.ServiceRegistrar, srv ScheduleSvcServer) {
	s.RegisterService(&ScheduleSvc_ServiceDesc, srv)
}

func _ScheduleSvc_AddSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleSvcServer).AddSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ScheduleSvc/AddSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleSvcServer).AddSchedule(ctx, req.(*AddScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleSvc_ListSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleSvcServer).ListSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ScheduleSvc/ListSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleSvcServer).ListSchedules(ctx, req.(*ListSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleSvc_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleSvcServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ScheduleSvc/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleSvcServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleSvc_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleSvcServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ScheduleSvc/DeleteSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleSvcServer).DeleteSchedule(ctx, req.(*DeleteScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleSvc_ServiceDesc is the grpc.ServiceDesc for ScheduleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valvedgrpc.ScheduleSvc",
	HandlerType: (*ScheduleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSchedule",
			Handler:    _ScheduleSvc_AddSchedule_Handler,
		},
		{
			MethodName: "ListSchedules",
			Handler:    _ScheduleSvc_ListSchedules_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _ScheduleSvc_GetSchedule_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _ScheduleSvc_DeleteSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
