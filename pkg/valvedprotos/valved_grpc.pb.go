// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package valvedprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValvedSvcClient is the client API for ValvedSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValvedSvcClient interface {
	// Open the valve
	Open(ctx context.Context, in *OpenValveRequest, opts ...grpc.CallOption) (*OpenValveReply, error)
	// Close the valve
	Close(ctx context.Context, in *CloseValveRequest, opts ...grpc.CallOption) (*CloseValveReply, error)
	// Returns the status of the valve
	Status(ctx context.Context, in *StatusValveRequest, opts ...grpc.CallOption) (*StatusValveReply, error)
}

type valvedSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewValvedSvcClient(cc grpc.ClientConnInterface) ValvedSvcClient {
	return &valvedSvcClient{cc}
}

func (c *valvedSvcClient) Open(ctx context.Context, in *OpenValveRequest, opts ...grpc.CallOption) (*OpenValveReply, error) {
	out := new(OpenValveReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ValvedSvc/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valvedSvcClient) Close(ctx context.Context, in *CloseValveRequest, opts ...grpc.CallOption) (*CloseValveReply, error) {
	out := new(CloseValveReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ValvedSvc/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valvedSvcClient) Status(ctx context.Context, in *StatusValveRequest, opts ...grpc.CallOption) (*StatusValveReply, error) {
	out := new(StatusValveReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.ValvedSvc/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValvedSvcServer is the server API for ValvedSvc service.
// All implementations must embed UnimplementedValvedSvcServer
// for forward compatibility
type ValvedSvcServer interface {
	// Open the valve
	Open(context.Context, *OpenValveRequest) (*OpenValveReply, error)
	// Close the valve
	Close(context.Context, *CloseValveRequest) (*CloseValveReply, error)
	// Returns the status of the valve
	Status(context.Context, *StatusValveRequest) (*StatusValveReply, error)
	mustEmbedUnimplementedValvedSvcServer()
}

// UnimplementedValvedSvcServer must be embedded to have forward compatible implementations.
type UnimplementedValvedSvcServer struct {
}

func (UnimplementedValvedSvcServer) Open(context.Context, *OpenValveRequest) (*OpenValveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedValvedSvcServer) Close(context.Context, *CloseValveRequest) (*CloseValveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedValvedSvcServer) Status(context.Context, *StatusValveRequest) (*StatusValveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedValvedSvcServer) mustEmbedUnimplementedValvedSvcServer() {}

// UnsafeValvedSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValvedSvcServer will
// result in compilation errors.
type UnsafeValvedSvcServer interface {
	mustEmbedUnimplementedValvedSvcServer()
}

func RegisterValvedSvcServer(s grpc.ServiceRegistrar, srv ValvedSvcServer) {
	s.RegisterService(&ValvedSvc_ServiceDesc, srv)
}

func _ValvedSvc_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValvedSvcServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ValvedSvc/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValvedSvcServer).Open(ctx, req.(*OpenValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValvedSvc_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValvedSvcServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ValvedSvc/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValvedSvcServer).Close(ctx, req.(*CloseValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValvedSvc_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValvedSvcServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.ValvedSvc/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValvedSvcServer).Status(ctx, req.(*StatusValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValvedSvc_ServiceDesc is the grpc.ServiceDesc for ValvedSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValvedSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valvedgrpc.ValvedSvc",
	HandlerType: (*ValvedSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _ValvedSvc_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ValvedSvc_Close_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ValvedSvc_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "valved.proto",
}
