// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package valvedprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SkeduleSvcClient is the client API for SkeduleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkeduleSvcClient interface {
	AddSkedule(ctx context.Context, in *AddSkeduleRequest, opts ...grpc.CallOption) (*AddSkeduleReply, error)
	ListSkedules(ctx context.Context, in *ListSkedulesRequest, opts ...grpc.CallOption) (*ListSkedulesReply, error)
	GetSkedule(ctx context.Context, in *GetSkeduleRequest, opts ...grpc.CallOption) (*GetSkeduleReply, error)
	DeleteSkedule(ctx context.Context, in *DeleteSkeduleRequest, opts ...grpc.CallOption) (*DeleteSkeduleReply, error)
}

type skeduleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSkeduleSvcClient(cc grpc.ClientConnInterface) SkeduleSvcClient {
	return &skeduleSvcClient{cc}
}

func (c *skeduleSvcClient) AddSkedule(ctx context.Context, in *AddSkeduleRequest, opts ...grpc.CallOption) (*AddSkeduleReply, error) {
	out := new(AddSkeduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.SkeduleSvc/AddSkedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skeduleSvcClient) ListSkedules(ctx context.Context, in *ListSkedulesRequest, opts ...grpc.CallOption) (*ListSkedulesReply, error) {
	out := new(ListSkedulesReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.SkeduleSvc/ListSkedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skeduleSvcClient) GetSkedule(ctx context.Context, in *GetSkeduleRequest, opts ...grpc.CallOption) (*GetSkeduleReply, error) {
	out := new(GetSkeduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.SkeduleSvc/GetSkedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skeduleSvcClient) DeleteSkedule(ctx context.Context, in *DeleteSkeduleRequest, opts ...grpc.CallOption) (*DeleteSkeduleReply, error) {
	out := new(DeleteSkeduleReply)
	err := c.cc.Invoke(ctx, "/valvedgrpc.SkeduleSvc/DeleteSkedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkeduleSvcServer is the server API for SkeduleSvc service.
// All implementations must embed UnimplementedSkeduleSvcServer
// for forward compatibility
type SkeduleSvcServer interface {
	AddSkedule(context.Context, *AddSkeduleRequest) (*AddSkeduleReply, error)
	ListSkedules(context.Context, *ListSkedulesRequest) (*ListSkedulesReply, error)
	GetSkedule(context.Context, *GetSkeduleRequest) (*GetSkeduleReply, error)
	DeleteSkedule(context.Context, *DeleteSkeduleRequest) (*DeleteSkeduleReply, error)
	mustEmbedUnimplementedSkeduleSvcServer()
}

// UnimplementedSkeduleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSkeduleSvcServer struct {
}

func (UnimplementedSkeduleSvcServer) AddSkedule(context.Context, *AddSkeduleRequest) (*AddSkeduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkedule not implemented")
}
func (UnimplementedSkeduleSvcServer) ListSkedules(context.Context, *ListSkedulesRequest) (*ListSkedulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkedules not implemented")
}
func (UnimplementedSkeduleSvcServer) GetSkedule(context.Context, *GetSkeduleRequest) (*GetSkeduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkedule not implemented")
}
func (UnimplementedSkeduleSvcServer) DeleteSkedule(context.Context, *DeleteSkeduleRequest) (*DeleteSkeduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkedule not implemented")
}
func (UnimplementedSkeduleSvcServer) mustEmbedUnimplementedSkeduleSvcServer() {}

// UnsafeSkeduleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkeduleSvcServer will
// result in compilation errors.
type UnsafeSkeduleSvcServer interface {
	mustEmbedUnimplementedSkeduleSvcServer()
}

func RegisterSkeduleSvcServer(s grpc.ServiceRegistrar, srv SkeduleSvcServer) {
	s.RegisterService(&SkeduleSvc_ServiceDesc, srv)
}

func _SkeduleSvc_AddSkedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkeduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeduleSvcServer).AddSkedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.SkeduleSvc/AddSkedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeduleSvcServer).AddSkedule(ctx, req.(*AddSkeduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkeduleSvc_ListSkedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeduleSvcServer).ListSkedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.SkeduleSvc/ListSkedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeduleSvcServer).ListSkedules(ctx, req.(*ListSkedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkeduleSvc_GetSkedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkeduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeduleSvcServer).GetSkedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.SkeduleSvc/GetSkedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeduleSvcServer).GetSkedule(ctx, req.(*GetSkeduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkeduleSvc_DeleteSkedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkeduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeduleSvcServer).DeleteSkedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valvedgrpc.SkeduleSvc/DeleteSkedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeduleSvcServer).DeleteSkedule(ctx, req.(*DeleteSkeduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SkeduleSvc_ServiceDesc is the grpc.ServiceDesc for SkeduleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkeduleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valvedgrpc.SkeduleSvc",
	HandlerType: (*SkeduleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSkedule",
			Handler:    _SkeduleSvc_AddSkedule_Handler,
		},
		{
			MethodName: "ListSkedules",
			Handler:    _SkeduleSvc_ListSkedules_Handler,
		},
		{
			MethodName: "GetSkedule",
			Handler:    _SkeduleSvc_GetSkedule_Handler,
		},
		{
			MethodName: "DeleteSkedule",
			Handler:    _SkeduleSvc_DeleteSkedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skedule.proto",
}
